-Query document
Sama seperti di relational database, di Monggo Db pun kita bisa melakukan query atau pencarian document yang sudah kira simpan di Collection
-> Mencari document
   db.collection.find(query);
->Mencari document bilang embbeded
   db.collection.fin({"items.product_id":2});

-Comparison Operator(1)
Operator   -   Keterangan
$eq            Membandingkan Value dengan value lain
$gt            Membandingkan value lebih besar dari value lain
$gte           Membandingkan value lebih besar atau sama dengan value lain
$lt            Membandingkan value lebih kacil dari value lain
$lte           Membandingkan value lebih kecil atau sama dengan value lain
$in            Membandingkan value dengan value yang ada di array
$nin           Membandingkan value tidak ada dalam value yang ada di array
$ne            Membandingkan value tidak sama dengan value lain

-Logical Operator
Operator   -   Keterangan
$and           Menggabungkan query dengan operasi AND,mengembalikan document jika semua kondisi benar
$or            Menggabgungkan query dengan operasi OR,mengembalikan document jika salah satu kondisi benar
$nor           Menggabungkan query dengan operasi NOR,mengembalikan document yang gagal di semua kondisi
$not           Membalikkan kondisi,mengembalikan document yang tidak sesuai dengan kondisi
->Contoh
db.products.find({$and:[
    {
        category:{
            $in:["laptop","handphone"]
        }
    },
    {
        price:{
            $gt:20000000
        }
    }
]});


-Element Query Operator
Operator     -    Keterangan
$exists           Mencocokkan document yang memiliki field tersebut
$type             Mencocokkan document yang memiliki type field tersebut
->Contoh
Contoh 1
db.products.find({ 
    category :{
        $exists:false
    }
});
contoh 2
db.products.find({
    category :{
        $type:"string"
    }
});

-Evalution Query Operator
Operator      -    Keterangan
$expr              Menggunakan aggregation operation
$jsonSchema        Validasi document sesuai dengan JSON Schema
$mod               Melakukan operasi modulo
$regex             Mengambil document sesua dengan regular expression(PCRE)
$text              Melakukan pencarian menggunakan text
$where             Mengambil document dengan JavaScriptFunction

->Contoh
// select * from products where price > 1000000
db.products.find({
    $expr: {
        $gt: ["$price", 1000000]
    }
});

// select * from customers where toUpper(_id) = 'KHANNEDY'
db.customer.find({
    $expr: {
        $eq: [
            { $toUpper: "$_id" }, 
            "SABDA"
        ]
    }
});

// select * from products where name is not null and category is not null
db.products.find({
    $jsonSchema: {
        required: [ "name", "category"]
    }
});

// select * from products where name is not null and type(name) = 'string' and type(price) = 'long'
db.products.find({
    $jsonSchema: {
        required: [ "name"],
        properties: {
            name: {
                bsonType: "string"
            },
            price: {
                bsonType: "long"
            }
        }
    }
});

// select * from products where price % 5 = 0
db.products.find({ 
    price: { 
        $mod: [5, 0]
    } 
});

// select * from products where name like "%mie%"
db.products.find({
    name: {
        $regex: /mie/,
        $options: "i"
    }
});

// select * from products where name like "Mie%"
db.products.find({
    name: {
        $regex: /^Mie/
    }
});

// create text index on products
db.products.createIndex({
    name: "text"
});

// select * from products where (name like "%mie%" or name like "%sedap%")
db.products.find({
    $text: {
        $search: "mie sedap"
    }
});

// select * from products where name like "%mie sedap%"
db.products.find({
    $text: {
        $search: '"mie sedap"'
    }
});

// select * fro customers where _id = "khannedy"
db.customers.find({
    $where: function(){
        return this._id == "khannedy";
    }
});


-Array Query Operator
















